{
    "single import": {
        "prefix": "im",
        "body": "import \"${1:package}\"",
        "description": "Snippet for import statement"
    },
    "multiple imports": {
        "prefix": "ims",
        "body": "import (\n\t\"${1:package}\"\n)",
        "description": "Snippet for a import block"
    },
    "single constant": {
        "prefix": "co",
        "body": "const ${1:name} = ${2:value}",
        "description": "Snippet for a constant"
    },
    "multiple constants": {
        "prefix": "cos",
        "body": "const (\n\t${1:name} = ${2:value}\n)",
        "description": "Snippet for a constant block"
    },
    "type function declaration": {
        "prefix": "tyf",
        "body": "type ${1:name} func($3) $4",
        "description": "Snippet for a type function declaration"
    },
    "type interface declaration": {
        "prefix": "tyi",
        "body": "type ${1:name} interface {\n\t$0\n}",
        "description": "Snippet for a type interface"
    },
    "type struct declaration": {
        "prefix": "tys",
        "body": "type ${1:name} struct {\n\t$0\n}",
        "description": "Snippet for a struct declaration"
    },
    "package main and main function": {
        "prefix": "pkgm",
        "body": "package main\n\nfunc main() {\n\t$0\n}",
        "description": "Snippet for main package & function"
    },
    "function declaration": {
        "prefix": "func",
        "body": "func $1($2) $3 {\n\t$0\n}",
        "description": "Snippet for function declaration"
    },
    "variable declaration": {
        "prefix": "var",
        "body": "var ${1:name} ${2:type}",
        "description": "Snippet for a variable"
    },
    "variables declaration": {
        "prefix": "vars",
        "body": "var (\n\t${1:name} ${2:type} = ${3:value}\n)",
        "description": "Snippet for a variable"
    },
    "switch statement": {
        "prefix": "switch",
        "body": "switch ${1:expression} {\ncase ${2:condition}:\n\t$0\n}",
        "description": "Snippet for switch statement"
    },
    "select statement": {
        "prefix": "sel",
        "body": "select {\ncase ${1:condition}:\n\t$0\n}",
        "description": "Snippet for select statement"
    },
    "case clause": {
        "prefix": "cs",
        "body": "case ${1:condition}:$0",
        "description": "Snippet for case clause"
    },
    "for statement": {
        "prefix": "for",
        "body": "for ${1}{\n\t$0\n}",
        "description": "Snippet for a pure for loop"
    },
    "for n statement": {
        "prefix": "fori",
        "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
        "description": "Snippet for a for loop"
    },
    "for range statement": {
        "prefix": "forr",
        "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
        "description": "Snippet for a for range loop"
    },
    "channel declaration": {
        "prefix": "ch",
        "body": "chan ${1:type}",
        "description": "Snippet for a channel"
    },
    "map declaration": {
        "prefix": "map",
        "body": "map[${1:type}]${2:type}",
        "description": "Snippet for a map"
    },
    "empty interface": {
        "prefix": "in",
        "body": "interface{}",
        "description": "Snippet for empty interface"
    },
    "if statement": {
        "prefix": "if",
        "body": "if ${1:condition} {\n\t$0\n}",
        "description": "Snippet for if statement"
    },
    "else branch": {
        "prefix": "el",
        "body": "else {\n\t$0\n}",
        "description": "Snippet for else branch"
    },
    "if else statement": {
        "prefix": "ife",
        "body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
        "description": "Snippet for if else"
    },
    "if err != nil": {
        "prefix": "ir",
        "body": "if err != nil {\n\t${1:return ${2:nil, }${3:err}}\n}",
        "description": "Snippet for if err != nil"
    },
    "fmt.Println": {
        "prefix": "fp",
        "body": "fmt.Println(\"$1\")",
        "description": "Snippet for fmt.Println()"
    },
    "fmt.Printf": {
        "prefix": "ff",
        "body": "fmt.Printf(\"$1\", ${2:var})",
        "description": "Snippet for fmt.Printf()"
    },
    "log.Println": {
        "prefix": "lp",
        "body": "log.Println(\"$1\")",
        "description": "Snippet for log.Println()"
    },
    "log.Printf": {
        "prefix": "lf",
        "body": "log.Printf(\"$1\", ${2:var})",
        "description": "Snippet for log.Printf()"
    },
    "log variable content": {
        "prefix": "lv",
        "body": "log.Printf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "Snippet for log.Printf() with variable content"
    },
    "t.Log": {
        "prefix": "tl",
        "body": "t.Log(\"$1\")",
        "description": "Snippet for t.Log()"
    },
    "t.Logf": {
        "prefix": "tlf",
        "body": "t.Logf(\"$1\", ${2:var})",
        "description": "Snippet for t.Logf()"
    },
    "t.Logf variable content": {
        "prefix": "tlv",
        "body": "t.Logf(\"${1:var}: %#+v\\\\n\", ${1:var})",
        "description": "Snippet for t.Logf() with variable content"
    },
    "make(...)": {
        "prefix": "make",
        "body": "make(${1:type}, ${2:0})",
        "description": "Snippet for make statement"
    },
    "new(...)": {
        "prefix": "new",
        "body": "new(${1:type})",
        "description": "Snippet for new statement"
    },
    "panic(...)": {
        "prefix": "pn",
        "body": "panic(\"$0\")",
        "description": "Snippet for panic"
    },
    "http ResponseWriter *Request": {
        "prefix": "wr",
        "body": "${1:w} http.ResponseWriter, ${2:r} *http.Request",
        "description": "Snippet for http Response"
    },
    "http.HandleFunc": {
        "prefix": "hf",
        "body": "${1:http}.HandleFunc(\"${2:/}\", ${3:handler})",
        "description": "Snippet for http.HandleFunc()"
    },
    "http handler declaration": {
        "prefix": "hand",
        "body": "func $1(${2:w} http.ResponseWriter, ${3:r} *http.Request) {\n\t$0\n}",
        "description": "Snippet for http handler declaration"
    },
    "http.Redirect": {
        "prefix": "rd",
        "body": "http.Redirect(${1:w}, ${2:r}, \"${3:/}\", ${4:http.StatusFound})",
        "description": "Snippet for http.Redirect()"
    },
    "http.Error": {
        "prefix": "herr",
        "body": "http.Error(${1:w}, ${2:err}.Error(), ${3:http.StatusInternalServerError})",
        "description": "Snippet for http.Error()"
    },
    "http.ListenAndServe": {
        "prefix": "las",
        "body": "http.ListenAndServe(\"${1::8080}\", ${2:nil})",
        "description": "Snippet for http.ListenAndServe"
    },
    "http.Serve": {
        "prefix": "sv",
        "body": "http.Serve(\"${1::8080}\", ${2:nil})",
        "description": "Snippet for http.Serve"
    },
    "goroutine anonymous function": {
        "prefix": "go",
        "body": "go func($1) {\n\t$0\n}($2)",
        "description": "Snippet for anonymous goroutine declaration"
    },
    "goroutine function": {
        "prefix": "gf",
        "body": "go ${1:func}($0)",
        "description": "Snippet for goroutine declaration"
    },
    "defer statement": {
        "prefix": "df",
        "body": "defer ${1:func}($0)",
        "description": "Snippet for defer statement"
    },
    "test function": {
        "prefix": "tf",
        "body": "func Test$1(t *testing.T) {\n\t$0\n}",
        "description": "Snippet for Test function"
    },
    "test main": {
        "prefix": "tm",
        "body": "func TestMain(m *testing.M) {\n\t$1\n\n\tos.Exit(m.Run())\n}",
        "description": "Snippet for TestMain function"
    },
    "benchmark function": {
        "prefix": "bf",
        "body": "func Benchmark$1(b *testing.B) {\n\tfor ${2:i} := 0; ${2:i} < b.N; ${2:i}++ {\n\t\t$0\n\t}\n}",
        "description": "Snippet for Benchmark function"
    },
    "example function": {
        "prefix": "ef",
        "body": "func Example$1() {\n\t$2\n\t//Output:\n\t$3\n}",
        "description": "Snippet for Example function"
    },
    "table driven test": {
        "prefix": "tdt",
        "body": "func Test$1(t *testing.T) {\n\ttestCases := []struct {\n\t\tdesc\tstring\n\t\t$2\n\t}{\n\t\t{\n\t\t\tdesc: \"$3\",\n\t\t\t$4\n\t\t},\n\t}\n\tfor _, tC := range testCases {\n\t\tt.Run(tC.desc, func(t *testing.T) {\n\t\t\t$0\n\t\t})\n\t}\n}",
        "description": "Snippet for table driven test"
    },
    "init function": {
        "prefix": "finit",
        "body": "func init() {\n\t$1\n}",
        "description": "Snippet for init function"
    },
    "main function": {
        "prefix": "fmain",
        "body": "func main() {\n\t$1\n}",
        "description": "Snippet for main function"
    },
    "method declaration": {
        "prefix": ["meth", "fum"],
        "body": "func (${1:receiver} ${2:type}) ${3:method}($4) $5 {\n\t$0\n}",
        "description": "Snippet for method declaration"
    },
    "hello world web app": {
        "prefix": "helloweb",
        "body": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc greet(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"Hello World! %s\", time.Now())\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", greet)\n\thttp.ListenAndServe(\":8080\", nil)\n}",
        "description": "Snippet for sample hello world webapp"
    },
    "sort implementation": {
        "prefix": "sort",
        "body": "type ${1:SortBy} []${2:Type}\n\nfunc (a $1) Len() int           { return len(a) }\nfunc (a $1) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a $1) Less(i, j int) bool { ${3:return a[i] < a[j]} }",
        "description": "Snippet for a custom sort.Sort interface implementation, for a given slice type."
    },
    "json tag": {
        "prefix": "json",
        "body": "`json:\"$1\"`",
        "description": "Snippet for struct json tag"
    },
    "xml tag": {
        "prefix": "xml",
        "body": "`xml:\"$1\"`",
        "description": "Snippet for struct xml tag"
    },
    "if key in a map": {
        "prefix": "om",
        "body": "if ${1:value}, ok := ${2:map}[${3:key}]; ok {\n\t$4\n}"
    },

    "if err != nil wrap": {
        "prefix": "errwr",
        "body": "if err != nil {\n\treturn fmt.Errorf(\"${1} %w\", err)\n}",
        "description": "Snippet for wraps if err != nil"
    },
    "if err != nil panic": {
        "prefix": "errp",
        "body": "if err != nil {\n\tpanic(err)\n}",
        "description": "Snippet for panic if err != nil"
    },
    "if err != nil log.Fatalf": {
        "prefix": "errlf",
        "body": "if err != nil {\n\tlog.Fatalf(\"${1} %s\", err)\n}",
        "description": "Snippet for exit if err != nil"
    },
    "new error struct": {
        "prefix": "errst",
        "body": "type ${1}Error struct {\n\t${2}\n}\n\nfunc (e *Error) Error() string {\n\treturn \"\"\n}",
        "description": "Snippet for new error struct"
    },
    "new error variable": {
        "prefix": "errvar",
        "body": "var Err${1} = errors.New(\"${2}\")",
        "description": "Snippet for new error variable"
    },
    "check errors.As": {
        "prefix": "erras",
        "body": "var e *${1}Error\nif errors.As(err, &e) {\n\t${2}\n}",
        "description": "Snippet for check errors.As"
    },
    "check errors.Is": {
        "prefix": "erris",
        "body": "if errors.Is(err, Err${1}) {\n\t// err, or some error that it wraps, is a permission problem\n\t${2}\n}",
        "description": "Snippet for check errors.Is"
    },
    "json Marshal and print": {
        "prefix": "jp",
        "body": "func (name string){\n\t// DEBUG: remove before commit\n\t_, file, line, _ := runtime.Caller(0)\n\tjb, _ := json.MarshalIndent(${1}, \"\", \"\t\")\n\tfmt.Printf(\"\n[%s:%d - %s]\n%s\n\n\", file, line, name, string(jb))\n\t_ = ioutil.WriteFile(name + \".json\", jb, 0644)\n}(\"${2}\")",
        "description": "Snippet for json Marshal and print"
    },
    "print debug info": {
        "prefix": "dp",
        "body": "func (){\n\t// DEBUG: remove before commit\n\t_, file, line, _ := runtime.Caller(0)\n\theader := fmt.Sprintf(\">>>>>> [%s:%d]\", file, line)\n\tfmt.Println(header, ${1})\n}()",
        "description": "Snippet for print debug info"
    },
    "json Marshal and print": {
        "prefix": "jp",
        "body": "func (name string){\n\t// DEBUG: remove before commit\n\t_, file, line, _ := runtime.Caller(0)\n\tjb, _ := json.MarshalIndent(${1}, \"\", \"  \")\n\tfmt.Printf(\"\\n[%s:%d - %s]\\n%s\\n\\n\", file, line, name, string(jb))\n\t_ = ioutil.WriteFile(name + \".json\", jb, 0644)\n}(\"${2}\")",
        "description": "Snippet for json Marshal and print"
    },
    "json load from file": {
        "prefix": "jsonLoad",
        "body": "func (){\n\tdoc, err := ioutil.ReadFile(\"${1}\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\terr = json.Unmarshal(doc, ${2})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}()",
        "description": "Snippet for json load from file"
    },
    "dump http request": {
        "prefix": "httpDumpRequest",
        "body": "func(req *http.Request) {\n\t// DEBUG: remove before commit\n\tdump, err := httputil.DumpRequestOut(req, true)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Printf(\"%s\", dump)\n}(${1})",
        "description": "Snippet for dump http request"
    },
    "dump http response": {
        "prefix": "httpDumpResponse",
        "body": "func(res *http.Response) {\n\t// DEBUG: remove before commit\n\tdump, err := httputil.DumpResponse(res, true)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Printf(\"%s\", dump)\n}(${1})",
        "description": "Snippet for dump http response"
    },
    "http test server": {
        "prefix": "httpTestSvr",
        "body": "s := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.String() == \"\" {\n\t\tw.WriteHeader(200)\n\t\treturn\n\t}\n\tif r.URL.String() == \"\" {\n\t\tfmt.Fprintf(w, \"{}\")\n\t\treturn\n\t}\n\tw.WriteHeader(404)\n}))\ndefer s.Close()",
        "description": "Snippet for http test server"
    },
    "basic flags": {
        "prefix": "flags",
        "body": "var output string\nvar option converter.Option\n\nflag.StringVar(&output, \"output\", \"\", \"the path of the output file\")\nflag.IntVar(&option.MinUsers, \"min-users\", 0, \"minimal number of participants\")\n\nflag.Parse()\n\nif output == \"\" {\n\tflag.PrintDefaults()\n\treturn\n}",
        "description": "Snippet for basic flags"
    },
    "basic flags": {
        "prefix": "createFile",
        "body": "f, err := os.Create(\"/tmp/dat2\")\nif err != nil {\n\tlog.Fatalf(\"Failed to create file: %s\", err)\n}\n\ndefer f.Close()\n\nd2 := []byte{115, 111, 109, 101, 10}\n_, err = f.Write(d2)\nif err != nil {\n\tlog.Fatalf(\"Failed to write file: %s\", err)\n}",
        "description": "Snippet for basic flags"
    },
    "import testify": {
        "prefix": "testify",
        "body": "\"github.com/stretchr/testify/assert\"\n\"github.com/stretchr/testify/require\"",
        "description": "Snippet for import testify"
    },
    "basic http server": {
        "prefix": "httpServer",
        "body": "http.HandleFunc(\"/hello\", func (w http.ResponseWriter, req *http.Request) {\n\tfmt.Fprintf(w, \"hello\\n\")\n})\nhttp.ListenAndServe(\":8090\", nil)",
        "description": "Snippet for basic http server"
    },
    "http server with graceful shutdown": {
        "prefix": "httpServerShutdown",
        "body": "type apiHandler struct{}\nfunc (apiHandler) ServeHTTP(http.ResponseWriter, *http.Request) {}\n\nfunc main() {\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/api/\", apiHandler{})\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\n\t\t// The \"/\" pattern matches everything, so we need to check\n\t\t// that we're at the root here.\n\t\tif req.URL.Path != \"/\" {\n\t\t\thttp.NotFound(w, req)\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(200)\n\t\tfmt.Fprintf(w, \"Welcome to the home page!\")\n\t})\n\n\tsrv := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: mux,\n\t}\n\n\tdone := make(chan os.Signal, 1)\n\tsignal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)\n\n\tgo func() {\n\t\tif err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(\"listen: %s\\n\", err)\n\t\t}\n\t}()\n\tlog.Print(\"Server Started\")\n\n\t<-done\n\tlog.Print(\"Server Stopped\")\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer func() {\n\t\t// extra handling here\n\t\tcancel()\n\t}()\n\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Fatalf(\"Server Shutdown Failed:%+v\", err)\n\t}\n\tlog.Print(\"Server Exited Properly\")\n}",
        "description": "Snippet for http server with graceful shutdown"
    },
    "basic http client": {
        "prefix": "httpClient",
        "body": "var httpClient = &http.Client{\n\tTimeout: time.Second * 10,\n}\n\nresponse, _ := httpClient.Get(url)",
        "description": "Snippet for basic http client"
    },
    "basic http client": {
        "prefix": "httpClientTrans",
        "body": "var netTransport = &http.Transport{\n\tDial: (&net.Dialer{\n\t\tTimeout: 5 * time.Second,\n\t}).Dial,\n\tTLSHandshakeTimeout: 5 * time.Second,\n}\n\nvar httpClient = &http.Client{\n\tTimeout: time.Second * 10,\n\tTransport: netTransport,\n}\n\nresponse, _ := httpClient.Get(url)",
        "description": "Snippet for basic http client"
    },
    "skip the test": {
        "prefix": "testSkip",
        "body": "fooAddr := os.Getenv(\"FOO_ADDR\")\nif fooAddr == \"\" {\n\tt.Skip(\"set FOO_ADDR to run this test\")\n}",
        "description": "Snippet for skip the test"
    },
    "select ctx.Done()": {
        "prefix": "ctxDone",
        "body": "select {\ncase <-ctx.Done():\n\treturn ctx.Err()\ncase out <- v:\ndefault:\n\t// non-blocking\n}",
        "description": "Snippet for select ctx.Done()"
    },
    "respondWithJSON": {
        "prefix": "respondWithJSON",
        "body": "func respondWithJSON(w http.ResponseWriter, code int, payload interface{}) error {\n\t\tresponse, err := json.Marshal(payload)\n\t\tif err != nil {\n\t\t\t\treturn err\n\t\t}\n\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\tw.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\tw.WriteHeader(code)\n\t\tw.Write(response)\n\t\treturn nil\n}",
        "description": "Snippet for respondWithJSON"
    },
    "handle JSON request": {
        "prefix": "handleJSONRequest",
        "body": "func handler(w http.ResponseWriter, r *http.Request) {\n\t\tdefer r.Body.Close()\n\n\t\tdat, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\t\trespondWithError(w, 500, \"couldn't read request\")\n\t\t\t\treturn\n\t\t}\n\t\tparams := requestBody{}\n\t\terr = json.Unmarshal(dat, &params)\n\t\tif err != nil {\n\t\t\t\trespondWithError(w, 500, \"couldn't unmarshal parameters\")\n\t\t\t\treturn\n\t\t}\n}",
        "description": "Snippet for handle JSON request"
    },
    "create a date": {
        "prefix": "timeDate",
        "body": "${1:date} := time.Date(${2:year}, ${3:month}, ${4:day}, 0, 0, 0, 0, time.UTC)\n${0}",
        "description": "Snippet for create a date"
    },
    "parse time as RFC1123": {
        "prefix": "timeParseRFC1123",
        "body": "${1:t}, err := time.Parse(\"Mon, 02 Jan 2006 15:04:05 MST\", ${2:str})\n${0}",
        "description": "Snippet for parse time as RFC1123"
    },
    "parse time as RFC3339": {
        "prefix": "timeParseRFC3339",
        "body": "${1:t}, err := time.Parse(\"2006-01-02T15:04:05Z07:00\", ${2:str})\n${0}",
        "description": "Snippet for parse time as RFC3339"
    },
    "format time as RFC1123": {
        "prefix": "timeFormatRFC1123",
        "body": "${1:str} := ${2:time}.Format(\"Mon, 02 Jan 2006 15:04:05 MST\")\n${0}",
        "description": "Snippet for format time as RFC1123"
    },
    "format time as RFC3339": {
        "prefix": "timeFormatRFC3339",
        "body": "${1:str} := ${2:time}.Format(\"2006-01-02T15:04:05Z07:00\")\n${0}",
        "description": "Snippet for format time as RFC3339"
    },
    "convert time between different timezones": {
        "prefix": "timeZone",
        "body": "loc, _ := time.LoadLocation(\"UTC\")\nloc, _ = time.LoadLocation(\"Europe/Berlin\")\nloc, _ = time.LoadLocation(\"America/New_York\")\n${1:t} := ${2:time}.In(loc))\n${0}",
        "description": "Snippet for convert time between different timezones"
    },
    "basic table driven tests": {
        "prefix": "testTable",
        "body": "tests := map[string]struct {\n\tinput string\n\twant  []string\n}{\n\t\"simple\": {input: \"\", want: []string{}},\n}\n\nfor name, tc := range tests {\n\tt.Run(name, func(t *testing.T) {\n\t\tgot := Split(tc.input, tc.sep)\n\t})\n}",
        "description": "Snippet for basic table driven tests"
    },
    "handle signals": {
        "prefix": "signals",
        "body": "sigs := make(chan os.Signal, 1)\ndone := make(chan bool, 1)\n\nsignal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n\ngo func() {\n\tsig := <-sigs\n\tfmt.Println(sig)\n\tdone <- true\n}()\n\nfmt.Println(\"awaiting signal\")\n<-done\nfmt.Println(\"exiting\")",
        "description": "Snippet for handle signals"
    },
    "check if a file exists": {
        "prefix": "fileExists",
        "body": "if _, err := os.Stat(\"${1}\"); err == nil {\n\t// path/to/whatever exists\n} else if errors.Is(err, os.ErrNotExist) {\n\t// path/to/whatever does *not* exist\n} else {\n\t// other errors\n}\n",
        "description": "Snippet for check if a file exists"
    }
}
